@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime
@page "/transactionlist/edit/{Id:int?}"
@using Fuel.Solution.EF.Repositories;
@using Fuel.Station.Blazor.Shared;
@using Fuel.Station.Model;
@using FuelStation.Model.Enums;
<PageTitle>Fuel Station</PageTitle>
<h3>Transaction Edit</h3>


@if (transaction == null)
{
    <div class="spinner-border text-secondary" role="status">
    </div>
}
else
{
    <br />

    @if (Id != null)
    {
        <div class="col-md-1 flex-md-row d-flex justify-content-start payment-col">
            <button class="btn btn-success btn-cancel-transaction" @onclick="OnSave">Save</button>
            <button class="btn btn-danger btn-cancel-transaction" @onclick="OnCancel">Cancel</button>
        </div>
        <br />
    }
    <div class="row">
        @if (Id == null)
        {
            <div class="col-md-5 flex-md-column d-flex justify-content-around">

                <div class="row">
                    <div class="col-md-6">
                        <label class="form-label">Customer</label>
                        <select class="form-control" @bind="transaction.CustomerId">
                            @foreach (var customer in customerList)
                            {
                                <option value="@customer.Id">@customer.Name - @customer.Surname</option>
                            }
                        </select>
                    </div>

                    <div class="col-md-6">
                        <label class="form-label">Employee</label>
                        <select class="form-control" @bind="transaction.EmployeeId">
                            @foreach (var employee in employeeList)
                            {
                                <option value="@employee.Id">@employee.Name - @employee.Surname</option>
                            }
                        </select>
                    </div>
                    <div class="col-md-6">
                        <label class="form-label">Date</label>
                        <input class="form-control" @bind="@transaction.Date" />
                    </div>
                </div>
            </div>



            <div class="col-md-2 flex-md-column d-flex justify-content-between payment-col">
                <button class="@cardButtonClass oi oi-dollar" @onclick="OnCash" @onclick:preventDefault>  </button>
                <button class="@cashButtonClass oi oi-credit-card" @onclick="OnCard" @onclick:preventDefault>  </button>
            </div>
            <div class="col-md-1 flex-md-row d-flex justify-content-start payment-col">
                <button class="btn btn-success" @onclick="OnSave">Save</button>
            </div>
            <div class="col-md-1 flex-md-row d-flex justify-content-start payment-col">
                <button class="btn btn-danger btn-cancel-transaction" @onclick="OnCancel">Cancel</button>
            </div>

        }
        else
        {
@*            <div class=" row">
            <div class="col-md-2 flex-md-column">
                <label class="form-label">Date</label>
                <input class="form-control" @bind="@transaction.Date"  />
            </div>
            </div>*@
            <div class="col-md-2">
                <label class="form-label">Customer</label>
                <select class="form-control" @bind="transaction.CustomerId">
                    @foreach (var customer in customerList)
                    {
                        <option value="@customer.Id">@customer.Name - @customer.Surname</option>
                    }
                </select>
            </div>
            <div class="col-md-2">
                <label class="form-label">Employee</label>
                <select class="form-control" @bind="transaction.EmployeeId">
                    @foreach (var employee in employeeList)
                    {
                        <option value="@employee.Id">@employee.Name - @employee.Surname</option>
                    }
                </select>
            </div>
            <div class="col-md-2">
                <label class="form-label">Total Value</label>
                <input class="form-control" @bind="@transaction.TotalValue" disabled />
            </div>
            <div class="col-md-2">
                <label class="form-label">Payment Method</label>
                <select class="form-control" @bind="transaction.PaymentMethod">
                    @foreach (var method in Enum.GetValues<PaymentMethod>())
                    {
                        <option value="@method">@method</option>
                    }
                </select>
            </div>
        }
    </div>


    <br />
    <br />
    <h3>Transaction Lines</h3>
    <br />
    <button class="btn btn-success" @onclick="AddLine">Add Line</button>

    <table class="table">
        <thead>
            <tr>
                <th>Item Code</th>
                <th>Quantity</th>
                <th>Item Price(&euro;)</th>
                <th>Net Value</th>
                <th>Discount Percent(%)</th>
                <th>Discount Value</th>
                <th>Total Value(&euro;)</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var transactionLine in transaction.TransactionLines)
            {
                <tr>
                    <td>
                        <InputSelect class="form-control" @bind-Value="@transactionLine.ItemId" @bind-Value:after="() => OnItemSelect(transactionLine)">
                            @foreach (var item in itemList)
                            {
                                <option value="@item.Id">@item.Code - @item.Description</option>
                            }
                        </InputSelect>
                    </td>
                    <td>
                        <InputNumber class="form-control" @bind-Value=@transactionLine.Quantity @bind-Value:after="() => OnLineQuantityChange(transactionLine)" />
                    </td>
                    <td>
                        <InputNumber class="form-control" @bind-Value=@transactionLine.ItemPrice @bind-Value:after="() => OnLineQuantityChange(transactionLine)" disabled />
                    </td>
                    <td>
                        <InputNumber class="form-control" @bind-Value=@transactionLine.NetValue @bind-Value:after="() => OnLineQuantityChange(transactionLine) " disabled />
                    </td>
                    <td>
                        <InputNumber class="form-control" @bind-Value=@transactionLine.DiscountPercent @bind-Value:after="() => OnLineQuantityChange(transactionLine)" disabled />
                    </td>
                    <td>
                        <InputNumber class="form-control" @bind-Value=@transactionLine.DiscountValue @bind-Value:after="() => OnLineQuantityChange(transactionLine)" disabled />
                    </td>
                    <td>
                        <InputNumber class="form-control" @bind-Value=@transactionLine.TotalValue @bind-Value:after="() => OnLineQuantityChange(transactionLine)" disabled />
                    </td>
                    <td>
                        <BootstrapButton ButtonType="BootstrapButtonType.Danger" OnClick="()=> RemoveLine(transactionLine)">X</BootstrapButton>
                    </td>
                    <input class="form-control" @bind="@transactionLine.TransactionId" hidden />
                </tr>
            }
        </tbody>
    </table>
}


@code {
    [Parameter] public int? Id { get; set; }

    private TransactionEditDto? transaction { get; set; }
    private List<CustomerListDto> customerList = new();
    private List<EmployeeListDto> employeeList = new();
    private List<ItemListDto> itemList = new();
    private bool isLoading { get; set; } = true;
    private decimal netValue { get; set; }
    //private decimal totalQuantity { get; set; }
    private decimal totalValue { get; set; }
    private decimal discountValue { get; set; }
    //private decimal totalDiscountValue { get; set; }
    //private decimal preDiscountTotalValue { get; set; }
    private bool isCashButtonClicked = false;
    private bool isCardButtonClicked = false;
    private string cardButtonClass = "btn btn-secondary btn-payment";
    private string cashButtonClass = "btn btn-secondary btn-payment";


    protected override async Task OnInitializedAsync()
    {
        var tempCustomerList = await httpClient.GetFromJsonAsync<List<CustomerListDto>>("customer");
        if (tempCustomerList is null)
        {
            //Todo handle if customerList is null

            return;
        }
        else
        {
            customerList = tempCustomerList;
        }
        var tempEmployeeList = await httpClient.GetFromJsonAsync<List<EmployeeListDto>>("employee");
        if (tempEmployeeList is null)
        {
            //Todo handle if employeeList is null

            return;
        }
        else
        {
            employeeList = tempEmployeeList;
        }
        itemList = await httpClient.GetFromJsonAsync<List<ItemListDto>>("item");
        if (Id == null)
        {
            transaction = new();
            transaction.TransactionLines = new List<TransactionLineEditDto>();
            transaction.Date = DateTime.Now;
        }
        else
        {
            transaction = await httpClient.GetFromJsonAsync<TransactionEditDto>($"transaction/{Id}");
            if (transaction is null)
            {
                //Todo handle if Transaction is null
                return;
            }
            //await UpdateTotalQuantity();
            //await UpdatePreDiscountTotalValue();
            await UpdateTransactionTotalValue();
            //TODO: selected
        }
        isLoading = false;
    }

    private void OnCancel()
    {
        navigationManager.NavigateTo("transactionlist");
    }

    private async Task OnSave()
    {
        HttpResponseMessage? response = null;
        if (transaction.CustomerId == 0 || transaction.EmployeeId == 0)
        {
            await jsRuntime.InvokeVoidAsync("alert", "Please fill all inputs with valid data!");
            return;
        }
        if (transaction.TransactionLines.Count == 0)
        {
            await jsRuntime.InvokeVoidAsync("alert", "Please add a transaction line!");
            return;
        }
        if (transaction.PaymentMethod == 0)
        {
            await jsRuntime.InvokeVoidAsync("alert", "Please choose payment method!");
            return;
        }
        if (!CardEligible() && transaction.PaymentMethod == PaymentMethod.CreditCard)
        {
            await jsRuntime.InvokeVoidAsync("alert", "Please choose cash method!");
            return;
        }
        foreach (var transactionLine in transaction.TransactionLines)
        {
            if (transactionLine.ItemId == 0 || transactionLine.Quantity < 1)
            {
                await jsRuntime.InvokeVoidAsync("alert", "Please fill all inputs with valid data!");
                return;
            }
        }

        if (Id == null)
        {

            response = await httpClient.PostAsJsonAsync("transaction", transaction);
        }
        else
        {
            response = await httpClient.PutAsJsonAsync("transaction", transaction);
        }

        response.EnsureSuccessStatusCode();
        navigationManager.NavigateTo("transactionlist");
    }

    private async Task<List<CustomerListDto>> getCustomers()
    {
        var tempCustomerList = await httpClient.GetFromJsonAsync<List<CustomerListDto>>("customer");
        if (tempCustomerList is null)
        {
            //Todo handle if customerList is null
            return new List<CustomerListDto>();
        }
        else
        {
            return tempCustomerList;
        }
    }

    private async Task<List<EmployeeListDto>> getEmployees()
    {
        var tempEmployeeList = await httpClient.GetFromJsonAsync<List<EmployeeListDto>>("employee");
        if (tempEmployeeList is null)
        {
            //Todo handle if employeeList is null
            return new List<EmployeeListDto>();
        }
        else
        {
            return tempEmployeeList;
        }
    }

    private void AddLine()
    {
        transaction.TransactionLines.Add(new TransactionLineEditDto());
    }

    async Task RemoveLine(TransactionLineEditDto transactionLine)
    {
        transaction.TransactionLines.Remove(transactionLine);
        //await UpdateTotalQuantity();
        //await UpdatePreDiscountTotalValue();
        await UpdateTransactionTotalValue();
    }


    async Task OnItemSelect(TransactionLineEditDto transactionLine)
    {
        var item = itemList.Find(item => item.Id == transactionLine.ItemId);
        transactionLine.ItemPrice = item.Price;
        await UpdateLineTotalValue(transactionLine);
        await ApplyLineNetValue(transactionLine);
        //await ApplyLineDiscountPercent(transactionLine);
        //await ApplyLineDiscountValue(transactionLine);

    }

    async Task OnLineQuantityChange(TransactionLineEditDto transactionLine)
    {
        await UpdateLineTotalValue(transactionLine);
        await ApplyLineNetValue(transactionLine);
        //await ApplyLineDiscountPercent(transactionLine);
        //await ApplyLineDiscountValue(transactionLine);
        await UpdateTransactionTotalValue();
    }

    async Task OnDiscountChange(TransactionLineEditDto transactionLine)
    {
        await UpdateLineTotalValue(transactionLine);
        await UpdateTransactionTotalValue();
    }

    async Task UpdateLineTotalValue(TransactionLineEditDto transactionLine)
    {
        transactionLine.TotalValue = transactionLine.ItemPrice * transactionLine.Quantity * (1 - (transactionLine.DiscountPercent));
        transactionLine.TotalValue = Math.Round(transactionLine.TotalValue, 2);
    }


    //async Task UpdateTotalQuantity()
    //{
    //    totalQuantity = 0;
    //    foreach (var transactionLine in transaction.TransactionLines)
    //    {
    //        totalQuantity += transactionLine.Quantity;
    //    }
    //}

    async Task UpdateTransactionTotalValue()
    {
        transaction.TotalValue = 0;
        foreach (var transactionLine in transaction.TransactionLines)
        {
            transaction.TotalValue += transactionLine.TotalValue;
        }
        transaction.TotalValue = Math.Round(transaction.TotalValue, 2);
    }


    async Task ApplyLineNetValue(TransactionLineEditDto transactionLine)
    {

        transactionLine.NetValue = Math.Round(transactionLine.ItemPrice * transactionLine.Quantity, 2);
        await UpdateLineTotalValue(transactionLine);

    }



    async Task RemoveLineNetValue()
    {
        netValue = 0;
        foreach (var transactionLine in transaction.TransactionLines)
        {
            //transactionLine.Discount = 0;
            await UpdateLineTotalValue(transactionLine);
        }
    }

    async Task ApplyLineDiscountValue()
    {
        discountValue = 0;
        foreach (var transactionLine in transaction.TransactionLines)
        {
            //transactionLine.Discount = 15;
            discountValue += transactionLine.NetValue * (transactionLine.DiscountPercent);
            await UpdateLineTotalValue(transactionLine);
        }
    }

    async Task RemoveLineDiscountValue()
    {
        discountValue = 0;
        foreach (var transactionLine in transaction.TransactionLines)
        {
            //transactionLine.Discount = 0;
            await UpdateLineTotalValue(transactionLine);
        }
    }

    async Task OnCash()
    {
        isCashButtonClicked = true;
        isCardButtonClicked = false;
        cardButtonClass = "btn btn-success btn-payment";
        cashButtonClass = "btn btn-secondary btn-payment";

        transaction.PaymentMethod = PaymentMethod.Cash;
        //await OnSave();
    }

    async Task OnCard()
    {
        if (CardEligible())
        {
            isCardButtonClicked = true;
            isCashButtonClicked = false;
            cardButtonClass = "btn btn-secondary btn-payment";
            cashButtonClass = "btn btn-success btn-payment";
            transaction.PaymentMethod = PaymentMethod.CreditCard;
            //await OnSave();
        }
        else
        {
            await jsRuntime.InvokeVoidAsync("alert", "This transaction must be paid by cash");
            cardButtonClass = "btn btn-secondary btn-payment";
            cashButtonClass = "btn btn-secondary btn-payment";
            isCardButtonClicked = false;
            isCashButtonClicked = false;
            //if (confirm) {
            //    await OnCash();
            //}
        }
    }

    private bool CardEligible()
    {
        if (transaction.TotalValue > 50)
        {
            return false;
        }
        else
        {
            return true;
        }
    }
}