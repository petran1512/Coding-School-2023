@page "/itemlist/edit/{Id:int?}"
@using Fuel.Station.Blazor.Shared;
@using Fuel.Station.Model;
@using FuelStation.Model.Enums;
@inject IJSRuntime jsRuntime
@inject HttpClient httpClient
@inject NavigationManager navigationManager
<PageTitle>Fuel Station</PageTitle>

@if (Item == null)
{
    <div class="spinner-border text-secondary" role="status"></div>
}
else
{
    @if (Id is null)
    {
        <h3>Create Item</h3>
    }
    else
    {
        <h3>Edit Item</h3>
    }

    <EditForm Model="Item" OnValidSubmit="OnSave">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="col-md-6">
            <label class="form-label">Code</label>
            <InputText class="form-control" @bind-Value="@Item.Code" />
        </div>
        <div class="col-md-6">
            <label class="form-label">Description</label>
            <InputText class="form-control" @bind-Value="@Item.Description" />
        </div>
        <div class="col-md-6">
            <label class="form-label">Item Type</label>
            <InputSelect class="form-control" @bind-Value="Item.itemType">
                @foreach (var itemtype in Enum.GetValues<ItemType>())
                {
                    <option value="@itemtype">@itemtype</option>
                }
            </InputSelect>
        </div>
        <div class="col-md-6">
            <label class="form-label">Price</label>
            <input class="form-control" @bind="@Item.Price" />
        </div>
        <div class="col-md-6">
            <label class="form-label">Cost</label>
            <input class="form-control" @bind="@Item.Cost" />
        </div>

        <div class="row mt-2">
            <div class="col">
                <BootstrapButton ButtonType="BootstrapButtonType.Success" IsSubmit="true">Save</BootstrapButton>
                <BootstrapButton ButtonType="BootstrapButtonType.Secondary" OnClick="OnCancel">Back</BootstrapButton>
            </div>
        </div>
    </EditForm>
}


@code {
    [Parameter] public int? Id { get; set; }
    ItemEditDto? Item { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Id == null)
        {
            Item = new();
        }
        else
        {
            Item = await httpClient.GetFromJsonAsync<ItemEditDto>($"item/{Id}");
            if (Item is null)
            {
                //TODO: Handle if item is null
            }
        }
    }

    private void OnCancel()
    {
        navigationManager.NavigateTo("itemlist");
    }

    private async Task OnSave()
    {
        HttpResponseMessage? response = null;
        if (Id == null)
        {
            response = await httpClient.PostAsJsonAsync("item", Item);
        }
        else
        {
            response = await httpClient.PutAsJsonAsync("item", Item);
        }
        if (response.IsSuccessStatusCode)
        {
            navigationManager.NavigateTo("/itemlist");
        }
        else
        {
            var error = await response.Content.ReadAsStringAsync();
            await jsRuntime.InvokeVoidAsync("alert", error);
        }
    }
}
