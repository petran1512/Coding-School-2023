@inject HttpClient httpClient
@using System.Net.Http
@inject NavigationManager navigationManager
@using System.Net.Http.Json
@using Fuel.Station.Blazor.Shared;
@inject IJSRuntime jsRuntime
@page "/customerlist"
@using Microsoft.AspNetCore.Authorization;
@attribute [Authorize(Roles = "Administrator,User")]
<PageTitle>Fuel Station</PageTitle>

@if (isLoading)
{
    <div class="spinner-border text-secondary" role="status"></div>
}
else
{
    <BootstrapButton ButtonType="BootstrapButtonType.Success" OnClick="CreateItem">Create</BootstrapButton>

    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th>Name</th>
                <th>Surname</th>
                <th>CardNumber</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var customer in customerList)
            {
                <tr>
                    <td>@customer.Name</td>
                    <td>@customer.Surname</td>
                    <td>@customer.CardNumber</td>
                    <td>
                        <BootstrapButton ButtonType="BootstrapButtonType.Warning" OnClick="()=> EditItem(customer)">Edit</BootstrapButton>
                        <BootstrapButton ButtonType="BootstrapButtonType.Primary" OnClick="()=> DetailItem(customer)">Details</BootstrapButton>
                        <BootstrapButton ButtonType="BootstrapButtonType.Danger" OnClick="()=> DeleteItem(customer)">Delete</BootstrapButton>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<CustomerListDto> customerList = new();
    private bool isLoading { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadItemsFromServer();
        isLoading = false;
    }

    private async Task LoadItemsFromServer()
    {
        var tempCustomerList = await httpClient.GetFromJsonAsync<List<CustomerListDto>>("Customer");
        if (tempCustomerList is not null)
        {
            customerList = tempCustomerList;
        }
        else
        {
            // TODO: if tempCustomerList is null
        }
    }

    private void CreateItem()
    {
        navigationManager.NavigateTo("customerList/edit");
    }

    private void EditItem(CustomerListDto customer)
    {
        navigationManager.NavigateTo($"customerlist/edit/{customer.Id}");
    }

    private async Task DeleteItem(CustomerListDto customer)
    {
        var confirm = await jsRuntime.InvokeAsync<bool>("confirm", "Delete Item. Are you sure?");
        if (confirm)
        {
            var response = await httpClient.DeleteAsync($"customer/{customer.Id}");
            if (response.IsSuccessStatusCode)
            {
                await LoadItemsFromServer();

            } else
            {
                var error = await response.Content.ReadAsStringAsync();
                await jsRuntime.InvokeVoidAsync("alert", error);
            }
        }
    }

    private void DetailItem(CustomerListDto customer)
    {
        navigationManager.NavigateTo($"customerList/details/{customer.Id}");
    }


}